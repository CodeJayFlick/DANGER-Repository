class JavaClasses:
    def __init__(self):
        pass
    
    VARIABLENAME_NUMBERACCURACY = 8
    
    @staticmethod
    def register_classes():
        Classes.register_class(ClassInfo(Object, "object"))
        
        Classes.register_class(ClassInfo(Number, "number")
            .user("num(ber)?s?")
            .name("Number")
            .description("A number, e.g. 2.5, 3 or -9812454.")
            .usage("[-]###[.###]")
            .examples(["set the player's health to 5.5", "set {_temp} to 2*{_temp} - 2.5"])
            .since("1.0")
            .default_expression(SimpleLiteral(1, True))
            .parser(Parser(Number)
                .parse(lambda s: Long.valueOf(s) if isinstance(Long.parseLong(s), int) else Double.parseDouble(s.replace("%", "")))
                .to_string(lambda n: str(n))
                .get_variable_name_pattern(r"-?\d+(?:\.\d+)?")
            )
        
        Classes.register_class(ClassInfo(Long, "long")
            .name("Long")
            .default_expression(SimpleLiteral(1L, True))
            .parser(Parser(Long)
                .parse(lambda s: Long.parseLong(s) if isinstance(Long.parseLong(s), int) else Double.parseDouble(s.replace("%", "")))
                .to_string(lambda n: str(n))
                .get_variable_name_pattern(r"-?\d+(?:\.\d+)?")
            )
        
        Classes.register_class(ClassInfo(Integer, "integer")
            .name("Integer")
            .default_expression(SimpleLiteral(1, True))
            .parser(Parser(Integer)
                .parse(lambda s: Integer.parseInt(s) if isinstance(Long.parseLong(s), int) else Double.parseDouble(s.replace("%", "")))
                .to_string(lambda n: str(n))
                .get_variable_name_pattern(r"-?\d+(?:\.\d+)?")
            )
        
        Classes.register_class(ClassInfo(Double, "double")
            .name("Double")
            .default_expression(SimpleLiteral(1.0, True))
            .parser(Parser(Double)
                .parse(lambda s: Double.parseDouble(s) if isinstance(Long.parseLong(s), int) else Float.parseFloat(s.replace("%", "")))
                .to_string(lambda n: str(n))
                .get_variable_name_pattern(r"-?\d+(?:\.\d+)?")
            )
        
        Classes.register_class(ClassInfo(Float, "float")
            .name("Float")
            .default_expression(SimpleLiteral(1.0f, True))
            .parser(Parser(Float)
                .parse(lambda s: Float.parseFloat(s) if isinstance(Long.parseLong(s), int) else Double.parseDouble(s.replace("%", "")))
                .to_string(lambda n: str(n))
                .get_variable_name_pattern(r"-?\d+(?:\.\d+)?")
            )
        
        Classes.register_class(ClassInfo(Short, "short")
            .name("Short")
            .default_expression(SimpleLiteral((1), True))
            .parser(Parser(Short)
                .parse(lambda s: Short.parseShort(s) if isinstance(Long.parseLong(s), int) else Byte.parseByte(s.replace("%", "")))
                .to_string(lambda n: str(n))
                .get_variable_name_pattern(r"-?\d+(?:\.\d+)?")
            )
        
        Classes.register_class(ClassInfo(Byte, "byte")
            .name("Byte")
            .default_expression(SimpleLiteral((1), True))
            .parser(Parser(Byte)
                .parse(lambda s: Byte.parseByte(s) if isinstance(Long.parseLong(s), int) else Short.parseShort(s.replace("%", "")))
                .to_string(lambda n: str(n))
                .get_variable_name_pattern(r"-?\d+(?:\.\d+)?")
            )
        
        Classes.register_class(ClassInfo(String, "string")
            .user("(text|strings?)")
            .name("Text")
            .description("Text is simply text, i.e. a sequence of characters...")
            .usage(["simple: \"...\"", "quotes: \"...\"\"...\"", "expressions: \"...%expression%...\"", "percent signs: \"...%%...\""])
            .examples(["broadcast \"Hello World!\"", "message \"Hello %player%\"", "message \"The id of '\"'\"%type of tool%'\" is %id of tool%.\""])
            .since("1.0")
            .parser(Parser(String)
                .parse(lambda s: s if context == ParseContext.CONFIG else VariableString.is_quoted_correctly(s, True) and Utils.replace_chat_styles(f"''{s[1:-1].replace('""', '"')}'"))
                .can_parse(lambda c: c != ParseContext.DEFAULT)
                .to_string(lambda n: str(n))
                .get_debug_message(lambda s: f"'{s}'")
                .to_variable_name_string(lambda s: s)
            )
        
    register_classes()
