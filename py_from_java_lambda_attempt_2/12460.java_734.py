Here is the translation of the given Java code into equivalent Python:

```Python
class InjectPayloadCallotherError:
    def __init__(self, addr_factory: 'AddressFactory', failed_payload):
        super().__init__(InjectPayloadSleigh.get_dummy_pcode(addr_factory), failed_payload)

    def __init__(self, addr_factory: 'AddressFactory', nm: str):
        super().__init__(InjectPayloadSleigh.get_dummy_pcode(addr_factory), nm)

    def isErrorPlaceholder(self) -> bool:
        return True
```

Note that Python does not have direct equivalent of Java's `package`, so I did not include it in the translation. Also, Python is dynamically typed and does not require explicit type declarations like Java does. The `@Override` annotation in Java has no direct equivalent in Python as well.

The above code defines a class `InjectPayloadCallotherError` with two constructors (`__init__`) that take an `addr_factory` (which I assume to be some kind of address factory) and either another object or a string. The first constructor calls the parent's constructor with dummy p-code generated by `get_dummy_pcode` method from `InjectPayloadSleigh`, along with the failed payload. The second constructor does similar thing but takes a name instead.

The class also defines an instance method `isErrorPlaceholder` that returns `True`.